-- ============================================================================
-- SQL Script for BalancePsy Database (PostgreSQL)
-- Project: Mental Health Platform with Psychologist Appointments
-- Database: PostgreSQL 12+
-- ============================================================================

-- Drop existing tables (in reverse order of dependencies)
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS user_interests CASCADE;
DROP TABLE IF EXISTS messages CASCADE;
DROP TABLE IF EXISTS reports CASCADE;
DROP TABLE IF EXISTS appointments CASCADE;
DROP TABLE IF EXISTS mood_records CASCADE;
DROP TABLE IF EXISTS psychologists CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TYPE IF EXISTS user_role_enum CASCADE;
DROP TYPE IF EXISTS appointment_status_enum CASCADE;
DROP TYPE IF EXISTS notification_type_enum CASCADE;

-- ============================================================================
-- ENUM TYPES
-- ============================================================================

-- User roles enumeration
CREATE TYPE user_role_enum AS ENUM ('client', 'psychologist', 'admin');

-- Appointment status enumeration
CREATE TYPE appointment_status_enum AS ENUM (
    'pending',      -- Ожидает подтверждения
    'confirmed',    -- Подтверждена
    'completed',    -- Завершена
    'cancelled'     -- Отменена
);

-- Notification type enumeration
CREATE TYPE notification_type_enum AS ENUM (
    'appointment',  -- Уведомление о записи
    'message',      -- Новое сообщение
    'reminder',     -- Напоминание
    'system'        -- Системное уведомление
);

-- ============================================================================
-- TABLE: users
-- Основная таблица пользователей системы
-- ============================================================================

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    phone VARCHAR(50),
    date_of_birth DATE,
    avatar_url TEXT,
    role user_role_enum NOT NULL DEFAULT 'client',
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP WITH TIME ZONE,
    
    -- Constraints
    CONSTRAINT email_format_check CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    CONSTRAINT phone_format_check CHECK (phone IS NULL OR phone ~ '^\+?[0-9]{10,15}$')
);

-- Indexes for performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_created_at ON users(created_at);

-- ============================================================================
-- TABLE: psychologists
-- Расширенный профиль для пользователей с ролью "psychologist"
-- ============================================================================

CREATE TABLE psychologists (
    psychologist_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL UNIQUE,
    specialization TEXT NOT NULL,
    experience_years INTEGER NOT NULL DEFAULT 0,
    education TEXT,
    license_number VARCHAR(100),
    bio TEXT,
    hourly_rate DECIMAL(10, 2),
    rating DECIMAL(3, 2) DEFAULT 0.00,
    total_sessions INTEGER NOT NULL DEFAULT 0,
    is_verified BOOLEAN NOT NULL DEFAULT false,
    available_for_booking BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Key
    CONSTRAINT fk_psychologist_user FOREIGN KEY (user_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Constraints
    CONSTRAINT experience_positive CHECK (experience_years >= 0),
    CONSTRAINT rating_range CHECK (rating >= 0 AND rating <= 5.00),
    CONSTRAINT hourly_rate_positive CHECK (hourly_rate IS NULL OR hourly_rate > 0)
);

-- Indexes
CREATE INDEX idx_psychologists_user_id ON psychologists(user_id);
CREATE INDEX idx_psychologists_specialization ON psychologists(specialization);
CREATE INDEX idx_psychologists_rating ON psychologists(rating DESC);
CREATE INDEX idx_psychologists_available ON psychologists(available_for_booking);

-- ============================================================================
-- TABLE: mood_records
-- Записи о настроении пользователей для трекинга психологического состояния
-- ============================================================================

CREATE TABLE mood_records (
    mood_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    mood_level INTEGER NOT NULL,
    note TEXT,
    recorded_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Key
    CONSTRAINT fk_mood_user FOREIGN KEY (user_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Constraints
    CONSTRAINT mood_level_range CHECK (mood_level >= 1 AND mood_level <= 10)
);

-- Indexes
CREATE INDEX idx_mood_user_id ON mood_records(user_id);
CREATE INDEX idx_mood_recorded_at ON mood_records(recorded_at DESC);
CREATE INDEX idx_mood_user_date ON mood_records(user_id, recorded_at DESC);

-- ============================================================================
-- TABLE: appointments
-- Записи на консультации между клиентами и психологами
-- ============================================================================

CREATE TABLE appointments (
    appointment_id SERIAL PRIMARY KEY,
    client_id INTEGER NOT NULL,
    psychologist_id INTEGER NOT NULL,
    appointment_date DATE NOT NULL,
    appointment_time TIME NOT NULL,
    duration_minutes INTEGER NOT NULL DEFAULT 60,
    status appointment_status_enum NOT NULL DEFAULT 'pending',
    video_call_url TEXT,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Keys
    CONSTRAINT fk_appointment_client FOREIGN KEY (client_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_appointment_psychologist FOREIGN KEY (psychologist_id) 
        REFERENCES psychologists(psychologist_id) ON DELETE CASCADE,
    
    -- Constraints
    CONSTRAINT duration_positive CHECK (duration_minutes > 0),
    CONSTRAINT appointment_datetime_future CHECK (
        appointment_date >= CURRENT_DATE OR 
        (appointment_date = CURRENT_DATE AND appointment_time >= CURRENT_TIME)
    )
);

-- Indexes
CREATE INDEX idx_appointments_client ON appointments(client_id);
CREATE INDEX idx_appointments_psychologist ON appointments(psychologist_id);
CREATE INDEX idx_appointments_date ON appointments(appointment_date);
CREATE INDEX idx_appointments_status ON appointments(status);
CREATE INDEX idx_appointments_datetime ON appointments(appointment_date, appointment_time);

-- ============================================================================
-- TABLE: reports
-- Отчеты по консультациям (могут быть предварительные и финальные)
-- ============================================================================

CREATE TABLE reports (
    report_id SERIAL PRIMARY KEY,
    appointment_id INTEGER NOT NULL,
    report_text TEXT NOT NULL,
    is_preliminary BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Key
    CONSTRAINT fk_report_appointment FOREIGN KEY (appointment_id) 
        REFERENCES appointments(appointment_id) ON DELETE CASCADE
);

-- Indexes
CREATE INDEX idx_reports_appointment ON reports(appointment_id);
CREATE INDEX idx_reports_created_at ON reports(created_at DESC);

-- ============================================================================
-- TABLE: messages
-- Система обмена сообщениями между пользователями
-- ============================================================================

CREATE TABLE messages (
    message_id SERIAL PRIMARY KEY,
    sender_id INTEGER NOT NULL,
    receiver_id INTEGER NOT NULL,
    message_text TEXT NOT NULL,
    is_read BOOLEAN NOT NULL DEFAULT false,
    sent_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    read_at TIMESTAMP WITH TIME ZONE,
    
    -- Foreign Keys
    CONSTRAINT fk_message_sender FOREIGN KEY (sender_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_message_receiver FOREIGN KEY (receiver_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Constraints
    CONSTRAINT different_users CHECK (sender_id != receiver_id)
);

-- Indexes
CREATE INDEX idx_messages_sender ON messages(sender_id);
CREATE INDEX idx_messages_receiver ON messages(receiver_id);
CREATE INDEX idx_messages_sent_at ON messages(sent_at DESC);
CREATE INDEX idx_messages_conversation ON messages(sender_id, receiver_id, sent_at DESC);
CREATE INDEX idx_messages_unread ON messages(receiver_id, is_read) WHERE is_read = false;

-- ============================================================================
-- TABLE: user_interests
-- Интересы и предпочтения пользователей
-- ============================================================================

CREATE TABLE user_interests (
    interest_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    interest_name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign Key
    CONSTRAINT fk_interest_user FOREIGN KEY (user_id) 
        REFERENCES users(user_id) ON DELETE CASCADE,
    
    -- Unique constraint to prevent duplicate interests per user
    CONSTRAINT unique_user_interest UNIQUE (user_id, interest_name)
);

-- Indexes
CREATE INDEX idx_interests_user ON user_interests(user_id);
CREATE INDEX idx_interests_name ON user_interests(interest_name);

-- ============================================================================
-- TABLE: notifications
-- Система уведомлений пользователей
-- ============================================================================

CREATE TABLE notifications (
    notification_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    notification_type notification_type_enum NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN NOT NULL DEFAULT false,
    related_entity_id INTEGER,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    read_at TIMESTAMP WITH TIME ZONE,
    
    -- Foreign Key
    CONSTRAINT fk_notification_user FOREIGN KEY (user_id) 
        REFERENCES users(user_id) ON DELETE CASCADE
);

-- Indexes
CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_created_at ON notifications(created_at DESC);
CREATE INDEX idx_notifications_unread ON notifications(user_id, is_read) WHERE is_read = false;
CREATE INDEX idx_notifications_type ON notifications(notification_type);

-- ============================================================================
-- TRIGGERS FOR updated_at
-- Автоматическое обновление поля updated_at при изменении записи
-- ============================================================================

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to relevant tables
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_psychologists_updated_at BEFORE UPDATE ON psychologists
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_appointments_updated_at BEFORE UPDATE ON appointments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_reports_updated_at BEFORE UPDATE ON reports
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- COMMENTS ON TABLES
-- ============================================================================

COMMENT ON TABLE users IS 'Основная таблица пользователей системы (клиенты, психологи, администраторы)';
COMMENT ON TABLE psychologists IS 'Расширенный профиль для пользователей с ролью "psychologist"';
COMMENT ON TABLE mood_records IS 'Записи о настроении пользователей для трекинга психологического состояния';
COMMENT ON TABLE appointments IS 'Записи на консультации между клиентами и психологами';
COMMENT ON TABLE reports IS 'Отчеты психологов по проведенным консультациям';
COMMENT ON TABLE messages IS 'Система обмена сообщениями между пользователями';
COMMENT ON TABLE user_interests IS 'Интересы и предпочтения пользователей';
COMMENT ON TABLE notifications IS 'Система уведомлений для пользователей';

-- ============================================================================
-- COMMENTS ON COLUMNS
-- ============================================================================

-- Users table
COMMENT ON COLUMN users.user_id IS 'Уникальный идентификатор пользователя';
COMMENT ON COLUMN users.email IS 'Email пользователя (используется для входа)';
COMMENT ON COLUMN users.password_hash IS 'Хеш пароля пользователя';
COMMENT ON COLUMN users.full_name IS 'Полное имя пользователя';
COMMENT ON COLUMN users.phone IS 'Номер телефона пользователя';
COMMENT ON COLUMN users.date_of_birth IS 'Дата рождения пользователя';
COMMENT ON COLUMN users.avatar_url IS 'URL аватара пользователя';
COMMENT ON COLUMN users.role IS 'Роль пользователя в системе (client, psychologist, admin)';
COMMENT ON COLUMN users.is_active IS 'Активен ли аккаунт пользователя';
COMMENT ON COLUMN users.created_at IS 'Дата и время регистрации';
COMMENT ON COLUMN users.updated_at IS 'Дата и время последнего обновления профиля';
COMMENT ON COLUMN users.last_login IS 'Дата и время последнего входа в систему';

-- Psychologists table
COMMENT ON COLUMN psychologists.psychologist_id IS 'Уникальный идентификатор профиля психолога';
COMMENT ON COLUMN psychologists.user_id IS 'Ссылка на пользователя (связь 1:1)';
COMMENT ON COLUMN psychologists.specialization IS 'Специализация психолога';
COMMENT ON COLUMN psychologists.experience_years IS 'Опыт работы в годах';
COMMENT ON COLUMN psychologists.education IS 'Образование психолога';
COMMENT ON COLUMN psychologists.license_number IS 'Номер лицензии';
COMMENT ON COLUMN psychologists.bio IS 'Биография и описание специалиста';
COMMENT ON COLUMN psychologists.hourly_rate IS 'Стоимость консультации за час';
COMMENT ON COLUMN psychologists.rating IS 'Средний рейтинг психолога (0-5)';
COMMENT ON COLUMN psychologists.total_sessions IS 'Общее количество проведенных сессий';
COMMENT ON COLUMN psychologists.is_verified IS 'Верифицирован ли профиль психолога';
COMMENT ON COLUMN psychologists.available_for_booking IS 'Доступен ли для записи';

-- Mood records table
COMMENT ON COLUMN mood_records.mood_id IS 'Уникальный идентификатор записи о настроении';
COMMENT ON COLUMN mood_records.user_id IS 'Пользователь, создавший запись';
COMMENT ON COLUMN mood_records.mood_level IS 'Уровень настроения (1-10, где 10 - отличное)';
COMMENT ON COLUMN mood_records.note IS 'Заметка пользователя о настроении';
COMMENT ON COLUMN mood_records.recorded_at IS 'Дата и время записи';

-- Appointments table
COMMENT ON COLUMN appointments.appointment_id IS 'Уникальный идентификатор записи';
COMMENT ON COLUMN appointments.client_id IS 'Клиент, записавшийся на консультацию';
COMMENT ON COLUMN appointments.psychologist_id IS 'Психолог, ведущий консультацию';
COMMENT ON COLUMN appointments.appointment_date IS 'Дата консультации';
COMMENT ON COLUMN appointments.appointment_time IS 'Время начала консультации';
COMMENT ON COLUMN appointments.duration_minutes IS 'Длительность консультации в минутах';
COMMENT ON COLUMN appointments.status IS 'Статус записи (pending, confirmed, completed, cancelled)';
COMMENT ON COLUMN appointments.video_call_url IS 'Ссылка на видеозвонок (Zvonda/WebRTC)';
COMMENT ON COLUMN appointments.notes IS 'Дополнительные заметки о консультации';

-- Reports table
COMMENT ON COLUMN reports.report_id IS 'Уникальный идентификатор отчета';
COMMENT ON COLUMN reports.appointment_id IS 'Консультация, к которой относится отчет';
COMMENT ON COLUMN reports.report_text IS 'Текст отчета психолога';
COMMENT ON COLUMN reports.is_preliminary IS 'Является ли отчет предварительным';

-- Messages table
COMMENT ON COLUMN messages.message_id IS 'Уникальный идентификатор сообщения';
COMMENT ON COLUMN messages.sender_id IS 'Отправитель сообщения';
COMMENT ON COLUMN messages.receiver_id IS 'Получатель сообщения';
COMMENT ON COLUMN messages.message_text IS 'Текст сообщения';
COMMENT ON COLUMN messages.is_read IS 'Прочитано ли сообщение';
COMMENT ON COLUMN messages.sent_at IS 'Дата и время отправки';
COMMENT ON COLUMN messages.read_at IS 'Дата и время прочтения';

-- User interests table
COMMENT ON COLUMN user_interests.interest_id IS 'Уникальный идентификатор интереса';
COMMENT ON COLUMN user_interests.user_id IS 'Пользователь, которому принадлежит интерес';
COMMENT ON COLUMN user_interests.interest_name IS 'Название интереса или хобби';

-- Notifications table
COMMENT ON COLUMN notifications.notification_id IS 'Уникальный идентификатор уведомления';
COMMENT ON COLUMN notifications.user_id IS 'Пользователь, получающий уведомление';
COMMENT ON COLUMN notifications.notification_type IS 'Тип уведомления (appointment, message, reminder, system)';
COMMENT ON COLUMN notifications.title IS 'Заголовок уведомления';
COMMENT ON COLUMN notifications.message IS 'Текст уведомления';
COMMENT ON COLUMN notifications.is_read IS 'Прочитано ли уведомление';
COMMENT ON COLUMN notifications.related_entity_id IS 'ID связанной сущности (appointment_id, message_id и т.д.)';
COMMENT ON COLUMN notifications.read_at IS 'Дата и время прочтения уведомления';

-- ============================================================================
-- END OF SCRIPT
-- ============================================================================